// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email            String       @unique
  password         String
  firstName        String       @map("first_name")
  lastName         String       @map("last_name")
  photo            String?
  work             String?
  location         String?
  description      String?
  links            SocialLinks?
  todos            Todo[]
  commentsAuthored Comment[]    @relation(name: "CommentAuthor")
  commentsReceived Comment[]    @relation(name: "CommentRecipient")
  chats            UserChat[]
  messages         Message[]
  role             Role         @relation(fields: [roleId], references: [id])
  roleId           String       @map("role_id")
  plan             Plan         @relation(fields: [planId], references: [id])
  planId           String       @map("plan_id")

  @@map("user")
}

model Todo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String?
  status      Boolean? @default(false)
  sticker     String?
  color       String?  @default("#e2e8f0")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("todo")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text String

  author   User   @relation(name: "CommentAuthor", fields: [authorId], references: [id])
  authorId String @map("author_id")

  recipient   User   @relation(name: "CommentRecipient", fields: [recipientId], references: [id])
  recipientId String @map("recipient_id")

  @@map("comment")
}

model SocialLinks {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  instagram String?
  facebook  String?
  github    String?
  linkedIn  String? @map("linked_in")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("social_links")
}

model Page {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String @unique
  content String @db.Text

  @@map("page")
}

model PageLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String  @unique
  link     String
  order    Int     @unique
  isButton Boolean @default(false) @map("is_button")

  @@map("page_link")
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users    UserChat[]
  messages Message[]

  @@map("chat")
}

model UserChat {
  userId String @map("user_id")
  chatId String @map("chat_id")
  user   User   @relation(fields: [userId], references: [id])
  chat   Chat   @relation(fields: [chatId], references: [id])

  @@id([userId, chatId])
  @@map("user_chat")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  content String

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @map("chat_id")

  @@map("message")
}

model Role {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  user User[]

  @@map("role")
}

model Plan {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String       @unique
  permissions Permission[]
  user        User[]

  @@map("plan")
}

model Permission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  value Boolean

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @map("plan_id")

  @@map("permission")
}
